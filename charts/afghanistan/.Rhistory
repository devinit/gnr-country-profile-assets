"g",
"g",
"%",
"%",
"g",
"g",
"g",
"g"
)
recs = c(
20.5,
435,
1.25,
250,
125,
0.25,
11,
360,
60,
0.5,
7,
22.5,
2,
2,
2.5
)
unit.dat = data.frame(indicator=ind.names,unit=ind.units,rec=recs)
for (j in ind.names){
c34.data$rec[which(c34.data$indicator==j)]=unit.dat$rec[which(unit.dat$indicator==j)]
}
for (j in ind.names){
c34.data$unit[which(c34.data$indicator==j)]=unfactor(unit.dat$unit[which(unit.dat$indicator==j)])
}
c34.data$value = as.numeric(c34.data$value)
setnames(c34.data,"rec","recommended")
c34.data$percent = c34.data$value/c34.data$recommended
# c34.data=c34.data[order(-"food"),]
setnames(c34.data,"indicator","food")
setnames(c34.data,"disagg.value","class")
c34.data = c34.data[order(c34.data$food, c34.data$percent),]
c34.data$outlier = 0
c34.data$outlier[which(c34.data$percent>2)] = 1
c34.data$percent[which(c34.data$percent>2)] = 2.1
c34.data = data.table(c34.data)
c34.data[,percent:=calc_outlier(.SD),by=.(food)]
linc.order = subset(c34.data,class=="Low income")
linc.order = linc.order[order(linc.order$food),]
c34.data$food = factor(c34.data$food,levels=rev(linc.order$food))
c34.data = c34.data[order(-c34.data$food),]
c34.data$column = c(rep(1,28),rep(2,32))
bar.dat = unique(c34.data[,c("food","recommended","column"),with=F])
bar.dat$class = this.country.label
c34.max = min(max(c34.data$percent,na.rm=T),2)
c34.data$class = factor(c34.data$class,levels=c("Low income","Lower-middle","Upper-middle","High income"))
i = 1
c34.data.sub = subset(c34.data,column==i)
trmel = data.frame(food="",recommended=0,example=T,class="Low income")
c34.data.sub = rbindlist(list(c34.data.sub,trmel),fill=T)
bar.dat.sub = subset(bar.dat,column==i)
bar.dat.sub = rbindlist(list(bar.dat.sub,trmel),fill=T)
c34a =
ggplot(c34.data.sub,aes(x=food,colour=class)) +
geom_bar(data=bar.dat.sub,aes(y=c34.max),fill="white",color=blue,stat="identity",width=0.4) +
geom_bar(data=bar.dat.sub,aes(y=1),fill="white",color=blue,stat="identity",width=0.4) +
geom_point(aes(y=percent),size=8,shape=21,fill="transparent",stroke=2) +
geom_text(data=subset(c34.data.sub,is.na(example)),aes(y=1,label=paste0(round.simple(recommended,1),unit)),color=blue,vjust=-1.3,size=10,family="Averta Regular") +
geom_text(data=subset(c34.data.sub,example==T),aes(y=1,label="Midpoint of TMREL"),color=blue,vjust=-1.3,size=10,family="Averta Regular") +
geom_text_repel(data=subset(c34.data.sub,outlier==1),aes(y=percent,label=round.simple(value)),color=blue,size=8,family="Averta Regular",vjust=2) +
annotate("text", x=8, y=0.3, label="0%/0g of TMREL",size=9,color=blue,family="Averta Regular") +
annotate("text", x=8, y=1.7, label="200% of TMREL",size=9,color=blue,family="Averta Regular") +
quintileColor +
coord_flip() +
theme_classic() +
theme(
axis.title=element_blank(),
axis.line=element_blank(),
axis.ticks=element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size=25,color=blue,family="Averta Regular"),
legend.title=element_blank(),
legend.position="left",
legend.text = element_text(size=22,color=blue,family="Averta Regular"),
legend.background = element_rect(fill = "transparent", colour = "transparent"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.key.size = unit(2.5,"lines")
)
i = 2
c34.data.sub = subset(c34.data,column==i)
bar.dat.sub = subset(bar.dat,column==i)
c34b = ggplot(c34.data.sub,aes(x=food,colour=class)) +
geom_bar(data=bar.dat.sub,aes(y=c34.max),fill="white",color=blue,stat="identity",width=0.4) +
geom_bar(data=bar.dat.sub,aes(y=1),fill="white",color=blue,stat="identity",width=0.4) +
geom_point(aes(y=percent),size=8,shape=21,fill="transparent",stroke=2,show.legend=F) +
geom_text(data=c34.data.sub,aes(y=1,label=paste0(round.simple(recommended,1),unit)),color=blue,vjust=-1.3,size=10,family="Averta Regular") +
geom_text_repel(data=subset(c34.data.sub,outlier==1),aes(y=percent,label=round.simple(value)),color=blue,size=7,family="Averta Regular",vjust=2) +
quintileColor +
coord_flip() +
theme_classic() +
theme(
axis.title=element_blank(),
axis.line=element_blank(),
axis.ticks=element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size=25,color=blue,family="Averta Regular"),
legend.title=element_blank(),
legend.text = element_text(size=22,color=blue,family="Averta Regular"),
legend.background = element_rect(fill = "transparent", colour = "transparent"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.key.size = unit(2.5,"lines")
)
}else{
c34a = NULL
c34b = NULL
}
# Chart 35
if(this.country %in% unique(dat_country$country)){
indicators = c("ODA_received","ODA_received_percent","ODA_basic_disbursed","ODA_basic_disbursed_percent")
if(!is.na(recipient)){
if(recipient){
c35names = c("% of total ODA","Basic nutrition ODA received")
indicators=c("ODA_received_percent","ODA_received")
y.lab = "ODA, US$ millions"
}else{
c35names = c("% of total ODA","Basic nutrition ODA disbursed")
indicators=c("ODA_basic_disbursed_percent","ODA_basic_disbursed")
y.lab = "ODA, US$ millions"
}
}
c35data = subset(countrydat,indicator %in% indicators)
if(!empty(c35data) && !(length(unique(as.numeric(c35data$value)))==1)){
c35data$value = as.numeric(c35data$value)
c35data = subset(c35data, !is.na(value))
c35data = c35data[c("year","indicator","value")]
c35.oda.max <- max(subset(c35data,indicator==indicators[2])$value,na.rm=TRUE)
c35.perc.max <- max(subset(c35data,indicator==indicators[1])$value,na.rm=TRUE)
# Why *1.25? Need to sort.
c35.ratio = (c35.oda.max/c35.perc.max)*1.25
c35.oda.max = c35.oda.max*1.25
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c35names[j]
c35data$indicator[which(c35data$indicator==ind)] = indname
}
c35.key.data.2 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[2],value=as.numeric(rep(NA,1)))
c35.key.data.1 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[1],value=as.numeric(rep(NA,1)))
c35 = ggplot(subset(c35data,indicator==c35names[2]),aes(x=year,y=value)) +
geom_area(alpha=1,show.legend=F,color="transparent",fill=yellow) +
geom_point(data=c35.key.data.2,aes(group=indicator,fill=indicator),size=12,color="transparent",stroke=0,shape=22) +
geom_line(data=subset(c35data,indicator==c35names[1]),aes(y=value*c35.ratio,color=indicator),size=2) +
yellowFill +
orangeColor +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=guide_legend(title=element_blank(),byrow=TRUE)) +
simple_style  +
scale_y_continuous(
expand = c(0,0),
limits=c(0,max(c35.oda.max*1.1,1)),
sec.axis = sec_axis(~./c35.ratio, name="% of total ODA")
) +
scale_x_continuous(breaks = seq(min(c35data$year),max(c35data$year),by=3)) +
theme(
legend.position="top"
,legend.box = "vertical"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.box.just = "left"
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_text(size=20,color=blue,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,panel.grid.major.y = element_line(color=dark.grey)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key.width = unit(1,"cm")
) + labs(y = y.lab)
}else{
c35 = NULL
}
}
if(this.country %in% unique(dat_reg$country)){
indicators = c("oda_per_capita")
c35names = c("Basic nutrition ODA received")
y.lab = "ODA, US$, per 1,000 people"
c35data = subset(countrydat,indicator %in% indicators)
c35data$value = as.numeric(c35data$value)
c35data = subset(c35data, !is.na(value))
if(sum(c35data$value)>0){
c35data = c35data[,c("year","indicator","value")]
c35.oda.max <- max(c35data$value,na.rm=TRUE)
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c35names[j]
c35data$indicator[which(c35data$indicator==ind)] = indname
}
c35.key.data.1 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[1],value=as.numeric(rep(NA,1)))
c35 = ggplot(c35data,aes(x=year,y=value)) +
geom_area(alpha=1,show.legend=F,color=blue,size=0,fill=yellow) +
geom_point(data=c35.key.data.1,aes(group=indicator,fill=indicator),size=12,color=blue,stroke=0,shape=22) +
yellowFill +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=guide_legend(title=element_blank(),byrow=TRUE)) +
simple_style  +
scale_y_continuous(
expand = c(0,0),
limits=c(0,max(c35.oda.max*1.1,1)),
) +
scale_x_continuous(breaks = seq(min(c35data$year),max(c35data$year),by=3)) +
theme(
legend.position="top"
,legend.box = "vertical"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.box.just = "left"
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_text(size=20,color=blue,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,panel.grid.major.y = element_line(color=dark.grey)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key.width = unit(1,"cm")
) + labs(y = y.lab)
}else{
c35 = NULL
}
}
if(this.country=="Global"){
c35names = c("% of total ODA","Basic nutrition ODA received")
indicators=c("ODA_received_percent","ODA_received")
y.lab = "ODA, US$ millions"
c35data = subset(countrydat,indicator %in% indicators)
if(!empty(c35data)){
c35data$value = as.numeric(c35data$value)
c35data = subset(c35data, !is.na(value))
c35data = c35data[c("year","indicator","value")]
c35.oda.max <- max(subset(c35data,indicator==indicators[2])$value,na.rm=TRUE)
c35.perc.max <- max(subset(c35data,indicator==indicators[1])$value,na.rm=TRUE)
# Why *1.25? Need to sort.
c35.ratio = (c35.oda.max/c35.perc.max)*1.25
c35.oda.max = c35.oda.max*1.25
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c35names[j]
c35data$indicator[which(c35data$indicator==ind)] = indname
}
c35.key.data.2 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[2],value=as.numeric(rep(NA,1)))
c35.key.data.1 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[1],value=as.numeric(rep(NA,1)))
c35 = ggplot(subset(c35data,indicator==c35names[2]),aes(x=year,y=value)) +
geom_area(alpha=1,show.legend=F,color="transparent",fill=yellow) +
geom_point(data=c35.key.data.2,aes(group=indicator,fill=indicator),size=12,color="transparent",stroke=0,shape=22) +
geom_line(data=subset(c35data,indicator==c35names[1]),aes(y=value*c35.ratio,color=indicator),size=2) +
yellowFill +
orangeColor +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=guide_legend(title=element_blank(),byrow=TRUE)) +
simple_style  +
scale_y_continuous(
expand = c(0,0),
limits=c(0,max(c35.oda.max*1.1,1)),
sec.axis = sec_axis(~./c35.ratio, name="% of total ODA")
) +
scale_x_continuous(breaks = seq(min(c35data$year),max(c35data$year),by=3)) +
theme(
legend.position="top"
,legend.box = "vertical"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.box.just = "left"
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_text(size=20,color=blue,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,panel.grid.major.y = element_line(color=dark.grey)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key.width = unit(1,"cm")
) + labs(y = y.lab)
}
}
# Charts 36-55
legendtypes = rep(c(F,F,F,T),100)
legendtypes[35]=F
i=36
for (indic in c("exclusive_breastfeeding","continued_breastfeeding_1yr","minimum_accept_diet","solid_foods"))
{
legendtype = legendtypes[i]
# if(empty(as.name(paste0("c",as.character(i-1)))) && legendtypes[i-1]==TRUE){
#   legendtypes[i]=TRUE
#   legendtype = legendtypes[i]}
indic_dat = subset(countrydat,indicator==indic & disaggregation=="gender" & !is.na(value))
disaggs = unique(indic_dat$disagg.value)
disaggs = sort(disaggs,decreasing=T)
name=paste0("c",as.character(i))
indic_years = data.table(indic_dat)[,.(count=nrow(.SD)),by=.(year)]
max_indic_count = max(max(indic_years$count,na.rm=T),1)
indic_years = max(subset(indic_years,count==max_indic_count)$year)
if(nrow(indic_dat)==length(unique(indic_dat$year)) && nrow(indic_dat)>0){
assign(name,grouped_bar(indic_dat, indic,"gender",c("Boys","Girls","Both"),fill=YellowRedGrey,legend=legendtype,byrow=T,nrow=2,subset.years=indic_years))
} else if(nrow(indic_dat)>length(unique(indic_dat$year))){
if (length(unique(indic_dat$year))<2)
{
assign(name,grouped_bar_line(indic_dat, indic,"gender",c("Boys","Girls","Both"),fill=YellowRedGrey,legend=legendtype,byrow=T,nrow=2,subset.years=indic_years))
}else{assign(name,grouped_line(countrydat, indic,"gender",c("Boys","Girls","Both"),color=YellowRedGreyColor,fill=YellowRedGreyFill,legend=legendtype,factor.years=F))}
}else if(legendtypes[i]==TRUE){assign(name,NULL)
legendtypes[i+1]=TRUE
} else {assign(name,NULL)}
i=i+1}
i=40
for (indic in c("exclusive_breastfeeding","continued_breastfeeding_1yr","minimum_accept_diet","solid_foods"))
{
legendtype = legendtypes[i]
# if(is.null(name) && legendtypes[i-1]==TRUE){
#   legendtypes[i]=TRUE
#   legendtype = legendtypes[i]}
indic_dat = subset(countrydat,indicator==indic & disaggregation %in% c("location","gender") & !(disagg.value %in% c("Boys","Girls")) & !is.na(value))
disaggs = unique(indic_dat$disagg.value)
disaggs = sort(disaggs,decreasing=T)
name=paste0("c",as.character(i))
indic_years = data.table(indic_dat)[,.(count=nrow(.SD)),by=.(year)]
max_indic_count = max(max(indic_years$count,na.rm=T),1)
indic_years = max(subset(indic_years,count==max_indic_count)$year)
if(nrow(indic_dat)==length(unique(indic_dat$year)) && nrow(indic_dat)>0){
assign(name,grouped_bar(indic_dat, indic,c("location","gender"),c("Urban","Rural","Both"),fill=YellowRedGrey,legend=legendtype,byrow=T,nrow=2,subset.years=indic_years))
}else if(nrow(indic_dat)>length(unique(indic_dat$year))){
if (length(unique(indic_dat$year))<2)
{
assign(name,grouped_bar_line(indic_dat, indic,c("location","gender"),c("Urban","Rural","Both"),legend=legendtype,fill=YellowRedGrey,byrow=T,nrow=2,subset.years=indic_years))
}else{assign(name,grouped_line(countrydat, indic,c("location","gender"),c("Urban","Rural","Both"),legend=legendtype,color=YellowRedGreyColor,fill=YellowRedGreyFill,factor.years=F))}
}else if(legendtypes[i]==TRUE){assign(name,NULL)
legendtypes[i+1]=TRUE
} else {assign(name,NULL)}
i=i+1}
i=44
for (indic in c("exclusive_breastfeeding","continued_breastfeeding_1yr","minimum_accept_diet","solid_foods"))
{
legendtype = legendtypes[i]
# if(is.null(paste0("c",as.character(i-1))) && legendtypes[i-1]==TRUE){
#   legendtypes[i]=TRUE
#   legendtype = legendtypes[i]}
indic_dat = subset(countrydat,indicator==indic & disaggregation %in% c("income","gender") & !(disagg.value %in% c("Boys","Girls")) & !is.na(value))
disaggs = unique(indic_dat$disagg.value)
disaggs = sort(disaggs,decreasing=T)
name=paste0("c",as.character(i))
indic_years = data.table(indic_dat)[,.(count=nrow(.SD)),by=.(year)]
max_indic_count = max(max(indic_years$count,na.rm=T),1)
indic_years = max(subset(indic_years,count==max_indic_count)$year)
if(nrow(indic_dat)==length(unique(indic_dat$year)) && nrow(indic_dat)>0){
assign(name,grouped_bar(indic_dat, indic,c("income","gender"),c("Lowest","Second lowest","Middle","Second highest","Highest","Both"),fill=c(red, orange, yellow, lighter.blue, light.blue,grey),legend=legendtype,byrow=T,nrow=2,subset.years=indic_years))
}else if(nrow(indic_dat)>length(unique(indic_dat$year))){
if (length(unique(indic_dat$year))<2)
{
assign(name,grouped_bar_line(indic_dat, indic,c("income","gender"),c("Lowest","Second lowest","Middle","Second highest","Highest","Both"),legend=legendtype,fill=c(red, orange, yellow, lighter.blue, light.blue,grey),byrow=T,nrow=2,subset.years=indic_years))
}else{assign(name,grouped_line(countrydat, indic,c("income","gender"),c("Lowest","Second lowest","Middle","Second highest","Highest","Both"),legend=legendtype,color=sixColor,fill=sixFill,factor.years=F))}
}else if(legendtypes[i]==TRUE){assign(name,NULL)
legendtypes[i+1]=TRUE
} else {assign(name,NULL)}
i=i+1}
i=48
for (indic in c("exclusive_breastfeeding","continued_breastfeeding_1yr","minimum_accept_diet","solid_foods"))
{
legendtype = legendtypes[i]
# if(is.null(paste0("c",as.character(i-1))) && legendtypes[i-1]==TRUE){
#   legendtypes[i]=TRUE
#   legendtype = legendtypes[i]}
indic_dat = subset(countrydat,indicator==indic & disaggregation %in% c("education","gender") & (disagg.value %in% c("None or primary","Secondary or higher","Both")) & !is.na(value))
disaggs = unique(indic_dat$disagg.value)
disaggs = sort(disaggs,decreasing=T)
name=paste0("c",as.character(i))
indic_years = data.table(indic_dat)[,.(count=nrow(.SD)),by=.(year)]
max_indic_count = max(max(indic_years$count,na.rm=T),1)
indic_years = max(subset(indic_years,count==max_indic_count)$year)
if(nrow(indic_dat)==length(unique(indic_dat$year)) && nrow(indic_dat)>0){
assign(name,grouped_bar(indic_dat, indic,c("education","gender"),c("None or primary","Secondary or higher","Both"),fill=YellowRedGrey,legend=legendtype,byrow=T,nrow=2,subset.years=indic_years))
}else if(nrow(indic_dat)>length(unique(indic_dat$year))){
if (length(unique(indic_dat$year))<2)
{
assign(name,grouped_bar_line(indic_dat, indic,c("education","gender"),c("None or primary","Secondary or higher","Both"),fill=YellowRedGrey,legend=legendtype,byrow=T,nrow=2,subset.years=indic_years))
}else{assign(name,grouped_line(countrydat, indic,c("education","gender"),c("None or primary","Secondary or higher","Both"),legend=legendtype,color=YellowRedGreyColor,fill=YellowRedGreyFill,factor.years=F))}
}else if(legendtypes[i]==TRUE){assign(name,NULL)
legendtypes[i+1]=TRUE
} else {assign(name,NULL)}
i=i+1}
i=52
for (indic in c("exclusive_breastfeeding"))
{
legendtype = legendtypes[i]
# if(is.null(paste0("c",as.character(i-1))) && legendtypes[i-1]==TRUE){
#   legendtypes[i]=TRUE
#   legendtype = legendtypes[i]}
indic_dat = subset(countrydat,indicator==indic & disaggregation %in% c("age","gender") & (disagg.value %in% c("0-1 month","2-3 months","4-5 months","Both")) & !is.na(value))
disaggs = unique(indic_dat$disagg.value)
disaggs = sort(disaggs,decreasing=T)
name=paste0("c",as.character(i))
indic_years = data.table(indic_dat)[,.(count=nrow(.SD)),by=.(year)]
max_indic_count = max(max(indic_years$count,na.rm=T),1)
indic_years = max(subset(indic_years,count==max_indic_count)$year)
if(nrow(indic_dat)==length(unique(indic_dat$year)) && nrow(indic_dat)>0){
assign(name,grouped_bar(indic_dat, indic,c("age","gender"),c("0-1 month","2-3 months","4-5 months","Both"),fill=fourFillValues,legend=legendtype,byrow=T,nrow=2,subset.years=indic_years))
}else if(nrow(indic_dat)>length(unique(indic_dat$year))){
if (length(unique(indic_dat$year))<2)
{
assign(name,grouped_bar_line(indic_dat, indic,c("age","gender"),c("0-1 month","2-3 months","4-5 months","Both"),fill=fourFillValues,legend=legendtype,byrow=T,nrow=2,subset.years=indic_years))
}else{assign(name,grouped_line(countrydat, indic,c("age","gender"),c("0-1 month","2-3 months","4-5 months","Both"),legend=legendtype,color=fourColor,fill=fourFill,factor.years=F))}
}else if(legendtypes[i]==TRUE){assign(name,NULL)
legendtypes[i+2]=TRUE
} else {assign(name,NULL)}
i=i+2}
c53=NULL
c55=NULL
i=54
for (indic in c("minimum_accept_diet"))
{
legendtype = TRUE
indic_dat = subset(countrydat,indicator==indic & disaggregation %in% c("age","gender") & (disagg.value %in% c("6-11 months","12-15 months","16-19 months","20-23 months","Both")) & !is.na(value))
disaggs = unique(indic_dat$disagg.value)
disaggs = sort(disaggs,decreasing=T)
name=paste0("c",as.character(i))
indic_years = data.table(indic_dat)[,.(count=nrow(.SD)),by=.(year)]
max_indic_count = max(max(indic_years$count,na.rm=T),1)
indic_years = max(subset(indic_years,count==max_indic_count)$year)
if(nrow(indic_dat)==length(unique(indic_dat$year)) && nrow(indic_dat)>0){
assign(name,grouped_bar(indic_dat, indic,c("age","gender"),c("6-11 months","12-15 months","16-19 months","20-23 months","Both"),fill=quintileGreyFillValues,legend=legendtype,byrow=T,nrow=2,subset.years=indic_years))
}else if(nrow(indic_dat)>length(unique(indic_dat$year))){
if (length(unique(indic_dat$year))<2)
{
assign(name,grouped_bar_line(indic_dat, indic,c("age","gender"),c("6-11 months","12-15 months","16-19 months","20-23 months","Both"),legend=legendtype,fill=quintileGreyFillValues,byrow=T,nrow=2,subset.years=indic_years))
}else{assign(name,grouped_line(countrydat, indic,c("age","gender"),c("6-11 months","12-15 months","16-19 months","20-23 months","Both"),legend=legendtype,color=quintileGreyColor,fill=quintileGreyFill,factor.years=F))}
}else{assign(name,NULL)}
i=i+2}
subset_na = subset(subset(countrydat,indicator=="lbw"),!is.na(value))
if (nrow(subset_na)>0){
subset_na$disagg.value = "all"
subset_na$value = as.numeric(subset_na$value)
c.max <- max(subset_na$value,na.rm=TRUE)
c.min.year = min(subset_na$year,na.rm=T)
c.max.year = max(subset_na$year,na.rm=T)
c.year.step = round((c.max.year-c.min.year)/4)
c.year.seq = sort(seq(c.max.year,c.min.year,-1*max(c.year.step,1)))
fill=scale_fill_manual(values=yellow)
color=scale_color_manual(values=yellow)
disagg.value = rep(1,nrow(subset_na))
c56 = ggplot(subset_na,aes(year,value)) +
geom_line(group=1,show.legend=T,size=2,color=yellow) +
fill +
color +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=F) +
simple_style  +
scale_x_continuous(labels=round,breaks=c.year.seq) +
scale_y_continuous(expand = c(0,0),limits=c(0,max(c.max*1.1,1))) +
# expand_limits(y=c1a.max*1.1) +
theme(
legend.position="top"
,legend.text = element_text(size=30,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_text(size=40,color=blue, angle=90, margin=margin(t=0,r=10,b=0,l=0), hjust=1,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_line(color=blue, size = 1.1)
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_blank()
,axis.text.x = element_text(size=40,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_blank()
) +
labs(y = "Prevalence %") +
geom_text_repel(size=15,color=blue,aes(group=disagg.value,label=round(as.numeric(firstAndLast(value,year,disagg.value)),digits=1)),vjust=-0.5,show.legend=F,family="Averta Regular",segment.colour="transparent")
} else {c56 = NULL}
# Rendering
for(i in 1:length(chart.list)){
chart.name = chart.list[i]
chart.width = resolutions[i]
chart = get(chart.name)
if(!is.null(chart)){
Cairo(family="Averta Regular",file=paste0(chart.name,".png"),width=chart.width,height=700,units="px",bg="transparent")
tryCatch({print(chart)},error=function(e){})
dev.off()
Cairo(family="Averta Regular",file=paste0(chart.name,".svg"),width=chart.width,height=700,units="px",bg="transparent",dpi=70,type="svg")
tryCatch({print(chart)},error=function(e){})
dev.off()
}
}
}
####End loop####
install.packages(new.packages)
install.packages("ggplot2")
update.packages()
update.packages("rlang")
update.packages("rlang")
install.packages("rlang")
install.packages("rlang")
####Setup#####
list.of.packages <- c("grid","ggplot2","reshape2","data.table","scales","varhandle","Cairo","plyr","eulerr","extrafont","ggrepel", "stringi")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
####Setup#####
list.of.packages <- c("grid","ggplot2","reshape2","data.table","scales","varhandle","Cairo","plyr","eulerr","extrafont","ggrepel", "stringi")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages,dependencies=TRUE)
lapply(list.of.packages, require, character.only=T)
####Setup#####
list.of.packages <- c("grid","ggplot2","reshape2","data.table","scales","varhandle","Cairo","plyr","eulerr","extrafont","ggrepel", "stringi")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages,dependencies=TRUE)
lapply(list.of.packages, require, character.only=T)
