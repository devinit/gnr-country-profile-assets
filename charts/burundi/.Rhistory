430,
1.08,
325,
150,
450,
8,
300,
95,
0, # Will be zero.
21.5,
0, # Will be zero
0, # Will be zero
2,
0 # Will be zero
)
unit.dat = data.frame(Measure=indicators,indicator=ind.names,unit=ind.units,rec=recs)
dietary_needs = subset(dat,Sex=="Both")[c("Ã¯..Location","Year","Mean","Measure")]
dietary_needs = merge(dietary_needs,unit.dat,by="Measure")
dietary_needs$Measure = NULL
dietary_needs$Mean[which(dietary_needs$unit=="%")] <- dietary_needs$Mean[which(dietary_needs$unit=="%")]*100
names(dietary_needs) = c("region","year","value","indicator","unit","rec")
View(dietary_needs)
dietary_needs$value[which(dietary_needs$indicator=="Omega 3")]<-dietary_needs$value[which(dietary_needs$indicator=="Omega 3")]*1000
global_dietary_needs <- subset(dietary_needs,region=="Global")
names(global_dietary_needs)[which(names(global_dietary_needs)=="value")] <- "global_value"
global_dietary_needs$region <- NULL
dietary_needs <- subset(dietary_needs,region %in% c("Global","World Bank High Income","World Bank Upper Middle Income","World Bank Lower Middle Income","World Bank Low Income"))
dietary_needs$region <- substr(dietary_needs$region,12,nchar(dietary_needs$region))
dietary_needs$region[which(dietary_needs$region=="")] <- "Global"
dietary_needs$label <- paste0(round(dietary_needs$value,1),dietary_needs$unit)
dietary_needs <- merge(dietary_needs,global_dietary_needs,all.x=T,by=c("year","indicator","unit","rec"))
dietary_needs$value <- dietary_needs$value/dietary_needs$global_value
dietary_needs$disaggregation = "location"
dietary_needs$disagg.value = dietary_needs$region
dietary_needs$component = "M"
View(dietary_needs)
####Setup#####
list.of.packages <- c("grid","ggplot2","reshape2","data.table","scales","varhandle","Cairo","plyr","eulerr","extrafont","ggrepel", "stringi")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
if(Sys.info()[["user"]]=="deanb"){
prefix <- "C:"
}else{
prefix <- "~"
}
wd = paste0(prefix,"/git/gnr-country-profile-2020")
setwd(wd)
font_import("fonts",prompt=F)
Cairo(
regular="Averta Regular",
bold="Averta Bold"
)
set.seed(12345)
dat_country <- read.csv("data.csv",na.strings=c("","."," "),as.is=TRUE,fileEncoding="utf-8")
dat_reg <- read.csv("data_reg.csv",na.strings=c("","."," "),as.is=TRUE,fileEncoding="utf-8")
dat_world <- read.csv("data_world.csv",na.strings=c("","."," "),as.is=TRUE,fileEncoding="utf-8")
names(dat_reg)[which(names(dat_reg)=="region")] = "country"
names(dat_world)[which(names(dat_world)=="region")]="country"
dat_world$country = "Global"
data <- rbind.fill(dat_country,dat_reg,dat_world)
countries <- unique(dat_country$country)
regions <- unique(dat_reg$country)
world <- unique(dat_world$country)
blank <- data.frame(x=0,y=0,text="No data")
no.data <- ggplot(blank,aes(x,y,label=text)) +
geom_text(size=20,color="#475C6D",family="Averta Regular") +
theme(
axis.line = element_blank()
,axis.text = element_blank()
,axis.ticks = element_blank()
,axis.title = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.background = element_rect(fill="#CFD9E5")
)
simple_style = theme_bw() +
theme(
panel.border = element_blank()
,panel.grid.major = element_blank()
,panel.background = element_blank()
,plot.background = element_blank()
,panel.grid.minor = element_blank()
,axis.line = element_line(colour = "black")
,text = element_text(family="Averta Regular")
)
yellow <- "#FCC97A" #light orange
orange <- "#F39000" #orange
red <- "#DE5D09" #dark orange
blue <- "#475C6D" #dark grey
light.blue <- "#93CAC9" #aqua
lighter.blue <- "#B2D8D7" #aqua light
dark.grey <- "#A0ADBB" #grey
grey <- "#CFD9E5" #light grey
white <- "#ffffff"
quintileFillValues <- c(red, orange, yellow, lighter.blue, light.blue)
yellowFill <- scale_fill_manual(values=c(yellow))
orangeColor <- scale_color_manual(values=c(orange))
slugify = function(value){
value = as.character(value)
value = stri_trans_nfkd(value)
value = stri_enc_toascii(value)
value = gsub("\032","",value)
value = gsub("(?!-)[[:punct:]]", "", value, perl=T)
value = gsub("[[:space:]]", "-", value)
value = tolower(value)
value = trimws(value)
value = gsub("[-]+", "-", value)
return(value)
}
chart.update.list.noextension=c("c5","c6","c23","c35")
chart.update.list=c(paste0(chart.update.list.noextension,".png"),paste0(chart.update.list.noextension,".svg"))
chart.list = c("c5","c6","c23","c35")
res_def = c(
"full" = 2400,
"half" = 1200,
"half-plus" = 1350,
"half-minus" = 1050,
"third" = 800,
"sixth" = 400,
"eighth" = 300
)
resolutions = res_def[c(
"half",
"half",
"half",
"full"
)]
safeFormat <- function(vec, precision=0, prefix="", suffix=""){
results <- c()
for(x in vec){
#Missing
if(is.na(x)){
result <- ""
}else{
result <- format(round.simple(x, digits = precision),format="d",big.mark=",",nsmall=precision)
}
if(result!=""){
result = paste0(prefix,result,suffix)
}
results <- c(results,result)
}
return(results)
}
round.simple = function(x, digits=0) {
posneg = sign(x)
z = abs(x)*10^digits
z = z + 0.5
z = trunc(z)
z = z/10^digits
z*posneg
}
wd = paste0(prefix,"/git/gnr-country-profile-2020/static")
setwd(wd)
res.names = names(res_def)
for(res.name in res.names){
chart.name = paste0("no-data-",res.name)
chart = no.data
chart.width = res_def[[res.name]]
Cairo(family="Averta Regular",file=paste0(chart.name,".png"),width=chart.width,height=700,units="px",bg="transparent")
tryCatch({print(chart)},error=function(e){})
dev.off()
Cairo(family="Averta Regular",file=paste0(chart.name,".svg"),width=chart.width,height=700,units="px",bg="transparent",dpi=70,type="svg")
tryCatch({print(chart)},error=function(e){})
dev.off()
}
wd = paste0(prefix,"/git/gnr-country-profile-2020/charts")
setwd(wd)
this.country="Burundi"
message(this.country)
# Clear chart namespace on new loop
for(chart.name in chart.list){
if(exists(chart.name)){
rm(list=chart.name)
}
}
unlink(paste(wd,slugify(this.country),sep="/",chart.update.list)
, recursive = TRUE
)
dir.create(paste(wd,slugify(this.country),sep="/"))
setwd(paste(wd,slugify(this.country),sep="/"))
countrydat <- subset(data,country==this.country)
if(this.country %in% unique(dat_country$country)){
line_name="National"
}
# if(this.country %in% unique(dat_reg$country)){
#   line_name="Regional"
# }
# if(this.country %in% unique(dat_world$country)){
#   line_name="Global"
# }
if(is.factor(countrydat$year)){
countrydat$year = unfactor(countrydat$year)
}
countrydat$year = as.numeric(countrydat$year)
if(nchar(this.country)>20){
this.country.label = line_name
}else{
this.country.label = copy(this.country)
}
#Chart 5
indicators = c("surface_water","unimproved_water","limited_water","basic_water","at_least_basic_water","safely_managed_water")
c5names = c("Surface water","Unimproved","Limited","Basic","At least basic","Safely managed")
c5data = subset(countrydat,indicator %in% indicators)
c5data$value = as.numeric(c5data$value)
c5data = subset(c5data, !is.na(value))
topandbottom = c(min(c5data$year),max(c5data$year))
c5data = subset(c5data, year %in% topandbottom)
c5data <- c5data[order(c5data$year),]
c5data$year = as.factor(c5data$year)
c5.max <- max(c5data$value,na.rm=TRUE)
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c5names[j]
c5data$indicator[which(c5data$indicator==ind)] = indname
}
c5names <- as.character(subset(c5names,c5names %in% unique(c5data$indicator)))
c5data$indicator <- factor(c5data$indicator,levels=c5names)
c5data <- c5data[order(is.na(c5data$value),c5data$year,match(c5data$indicator,c5names)),]
c5data <- ddply(c5data, .(year),
transform, pos = (100-cumsum(value)) + (0.5 * value)
,valid = sum(!is.na(value),na.rm=TRUE))
if(nrow(c5data)>0){
c5data <- subset(c5data,valid>=1)
c5.key.data = data.frame(
indicator = unique(c5data$indicator),
year = as.numeric(rep(NA,length(unique(c5data$indicator)))),
value = as.numeric(rep(NA,length(unique(c5data$indicator)))),
pos = as.numeric(rep(NA,length(unique(c5data$indicator)))),
valid = as.numeric(rep(NA,length(unique(c5data$indicator))))
)
c5 <- ggplot(c5data,aes(year,value,fill=indicator)) +
geom_bar(stat="identity",width=0.7,color="transparent",size=1,show.legend=F) +
geom_point(data=c5.key.data,aes(fill=indicator),size=12,color="transparent",stroke=0,shape=22) +
scale_fill_manual(
labels=factor(c5names,levels=unique(c5data$indicator))
,values=quintileFillValues
,drop = FALSE
) +
guides(fill=guide_legend(title=element_blank(),nrow=2,byrow=TRUE)) +
simple_style  +
scale_y_continuous(expand = c(0,0)) +
theme(
legend.position="top"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="horizontal"
,axis.title.x=element_blank()
,axis.title.y=element_blank()
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_blank()
,axis.text.x = element_text(size=35,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_rect(fill = "transparent", colour = "transparent")
,legend.key.size = unit(2.2,"lines")
) + geom_text(data=subset(c5data,value>5,decreasing=T),size=10,aes(y=pos,label=safeFormat(value),color=indicator),show.legend=F,family="Averta Regular") +
scale_color_manual(breaks=c5names,values=c(blue,blue,blue,blue,blue),drop=FALSE)
}else{
c5 = NULL
}
c5
c5
#Chart 6
indicators = c("open_defecation","unimproved_sanitation","limited_sanitation","basic_sanitation","at_least_basic_sanitation","safely_managed_sanitation")
c6names = c("Open defecation","Unimproved","Limited","Basic","At least basic","Safely managed")
c6data = subset(countrydat,indicator %in% indicators)
c6data$value = as.numeric(c6data$value)
c6data = subset(c6data, !is.na(value))
topandbottom = c(min(c6data$year),max(c6data$year))
c6data = subset(c6data, year %in% topandbottom)
c6data <- c6data[order(c6data$year),]
c6data$year = as.factor(c6data$year)
c6.max <- max(c6data$value,na.rm=TRUE)
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c6names[j]
c6data$indicator[which(c6data$indicator==ind)] = indname
}
c6names <- as.character(subset(c6names,c6names %in% unique(c6data$indicator)))
c6data$indicator <- factor(c6data$indicator,levels=c6names)
c6data <- c6data[order(is.na(c6data$value),c6data$year,match(c6data$indicator,c6names)),]
c6data <- ddply(c6data, .(year),
transform, pos = (100-cumsum(value)) + (0.5 * value)
,valid = sum(!is.na(value),na.rm=TRUE))
if(nrow(c6data)>0){
c6data <- subset(c6data,valid>=1)
c6.key.data = data.frame(
indicator = unique(c6data$indicator),
year = as.numeric(rep(NA,length(unique(c6data$indicator)))),
value = as.numeric(rep(NA,length(unique(c6data$indicator)))),
pos = as.numeric(rep(NA,length(unique(c6data$indicator)))),
valid = as.numeric(rep(NA,length(unique(c6data$indicator))))
)
c6 <- ggplot(c6data,aes(year,value,fill=indicator)) +
geom_bar(stat="identity",width=0.7,color="transparent",size=1,show.legend=F) +
geom_point(data=c6.key.data,aes(fill=indicator),size=12,color="transparent",stroke=0,shape=22) +
scale_fill_manual(
labels=factor(c6names,levels=unique(c6data$indicator))
,values=quintileFillValues
,drop = FALSE
) +
guides(fill=guide_legend(title=element_blank(),nrow=2,byrow=TRUE)) +
simple_style  +
scale_y_continuous(expand = c(0,0)) +
theme(
legend.position="top"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="horizontal"
,axis.title.x=element_blank()
,axis.title.y=element_blank()
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_blank()
,axis.text.x = element_text(size=35,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_rect(fill = "transparent", colour = "transparent")
,legend.key.size = unit(2.2,"lines")
) + geom_text(data=subset(c6data,value>5,decreasing=T),size=10,aes(y=pos,label=safeFormat(value),color=indicator),show.legend=FALSE,family="Averta Regular") +
scale_color_manual(breaks=c6names,values=c(blue,blue,blue,blue,blue),drop=FALSE)
}else{
c6 = NULL
}
# Chart 23
wasting = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Wasting alone")$value)/100
stunting = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Stunting alone")$value)/100
overweight = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Overweight alone")$value)/100
wasting_and_stunting = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Wasting and stunting")$value)/100
stunting_and_overweight = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Stunting and overweight")$value)/100
all = 1
free = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Free from")$value)/100
combinations = c(
A=0
,B=0
,C=0
,D=all
,"A&B"=0
,"A&C"=0
,"A&D"=wasting
,"B&C"=0
,"B&D"=stunting
,"C&D"=overweight
,"A&B&C"=0
,"A&B&D"=wasting_and_stunting
,"A&C&D"=0
,"B&C&D"=stunting_and_overweight
,"A&B&C&D"=0
)
label.vals = combinations
if(length(wasting)>0){
label.vals["A&D"] = wasting
label.vals["B&D"] = stunting
label.vals["C&D"] = overweight
label.vals["D"] = free
}
label.text = percent(label.vals)
if( this.country != "Global"){
label.text[which(label.vals<=0.02)] = ""}
c23_dat = tryCatch({euler(combinations,shape="ellipse")},error=function(e){NULL})
if(!is.null(c23_dat) & length(free) > 0 ){
c23 = plot(c23_dat,
legend = list(labels=c("Wasting only","Stunting only","Overweight only","No wasting, stunting or overweight"),font="arial",vgap=2,fontsize=25,fontcolor=blue,fontfamily="Averta Regular")
,edges = list(col="transparent",lwd=3)
,quantities = list(labels=label.text,fontsize=20,col=blue,fontfamily="Averta Regular")
,fills=list(fill=c(yellow,orange,light.blue,grey),alpha=1)
)
}else{
c23 = NULL
}
# Chart 35
if(this.country %in% c(unique(dat_country$country),unique(dat_reg$country))){
test = subset(countrydat,year==2018&indicator %in% c("BN_ODA_received","BN_ODA_donated"))
if(nrow(test)!=0){
if(unique(test$indicator=="BN_ODA_received")){
c35names = c("% of total ODA","Basic nutrition ODA received")
indicators=c("BN_ODA_received_percent","BN_ODA_received")
y.lab = "ODA, US$ millions"
}else{
c35names = c("% of total ODA","Basic nutrition ODA disbursed")
indicators=c("BN_ODA_donated_percent","BN_ODA_donated")
y.lab = "ODA, US$ millions"
}
}
}
c35data = subset(countrydat,indicator %in% indicators)
if(!empty(c35data) && !(length(unique(as.numeric(c35data$value)))==1)){
c35data$value = as.numeric(c35data$value)
c35data = subset(c35data, !is.na(value))
c35data = c35data[c("year","indicator","value")]
c35.oda.max <- max(subset(c35data,indicator==indicators[2])$value,na.rm=TRUE)
c35.perc.max <- max(subset(c35data,indicator==indicators[1])$value,na.rm=TRUE)
# Why *1.25? Need to sort.
c35.ratio = (c35.oda.max/c35.perc.max)*1.25
c35.oda.max = c35.oda.max*1.25
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c35names[j]
c35data$indicator[which(c35data$indicator==ind)] = indname
}
c35.key.data.2 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[2],value=as.numeric(rep(NA,1)))
c35.key.data.1 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[1],value=as.numeric(rep(NA,1)))
c35 = ggplot(subset(c35data,indicator==c35names[2]),aes(x=year,y=value)) +
geom_area(alpha=1,show.legend=F,color="transparent",fill=yellow) +
geom_point(data=c35.key.data.2,aes(group=indicator,fill=indicator),size=12,color="transparent",stroke=0,shape=22) +
geom_line(data=subset(c35data,indicator==c35names[1]),aes(y=value*c35.ratio,color=indicator),size=2) +
yellowFill +
orangeColor +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=guide_legend(title=element_blank(),byrow=TRUE)) +
simple_style  +
scale_y_continuous(
expand = c(0,0),
limits=c(0,max(c35.oda.max*1.1,1)),
sec.axis = sec_axis(~./c35.ratio, name="% of total ODA")
) +
scale_x_continuous(breaks = seq(min(c35data$year),max(c35data$year),by=3)) +
theme(
legend.position="right"
,legend.box = "vertical"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,1)
# ,legend.box.just = "left"
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_text(size=20,color=blue,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue,size=0.2)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,panel.grid.major.y = element_line(color=grey,size=0.2)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key.width = unit(1,"cm")
) + labs(y = y.lab)
}else{
c35 = NULL
}
if(this.country=="Global"){
c35names = c("% of total ODA","Basic nutrition ODA received")
indicators=c("BN_ODA_received_percent","BN_ODA_received")
y.lab = "ODA, US$ millions"
c35data = subset(countrydat,indicator %in% indicators)
if(!empty(c35data)){
c35data$value = as.numeric(c35data$value)
c35data = subset(c35data, !is.na(value))
c35data = c35data[c("year","indicator","value")]
c35.oda.max <- max(subset(c35data,indicator==indicators[2])$value,na.rm=TRUE)
c35.perc.max <- max(subset(c35data,indicator==indicators[1])$value,na.rm=TRUE)
# Why *1.25? Need to sort.
c35.ratio = (c35.oda.max/c35.perc.max)*1.25
c35.oda.max = c35.oda.max*1.25
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c35names[j]
c35data$indicator[which(c35data$indicator==ind)] = indname
}
c35.key.data.2 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[2],value=as.numeric(rep(NA,1)))
c35.key.data.1 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[1],value=as.numeric(rep(NA,1)))
c35 = ggplot(subset(c35data,indicator==c35names[2]),aes(x=year,y=value)) +
geom_area(alpha=1,show.legend=F,color="transparent",fill=yellow) +
geom_point(data=c35.key.data.2,aes(group=indicator,fill=indicator),size=12,color="transparent",stroke=0,shape=22) +
geom_line(data=subset(c35data,indicator==c35names[1]),aes(y=value*c35.ratio,color=indicator),size=2) +
yellowFill +
orangeColor +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=guide_legend(title=element_blank(),byrow=TRUE)) +
simple_style  +
scale_y_continuous(
expand = c(0,0),
limits=c(0,max(c35.oda.max*1.1,1)),
sec.axis = sec_axis(~./c35.ratio, name="% of total ODA")
) +
scale_x_continuous(breaks = seq(min(c35data$year),max(c35data$year),by=3)) +
theme(
legend.position="right"
,legend.box = "vertical"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,1)
,legend.box.just = "left"
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_text(size=20,color=blue,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 0.2)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,panel.grid.major.y = element_line(color=grey,size=0.2)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key.width = unit(1,"cm")
) + labs(y = y.lab)
}
}
# Rendering
for(i in 1:length(chart.list)){
chart.name = chart.list[i]
print(chart.name)
chart.width = resolutions[i]
if (chart.name %in% chart.update.list.noextension){
chart = get(chart.name)
if(!is.null(chart)){
Cairo(family="Averta Regular",file=paste0(chart.name,".png"),width=chart.width,height=700,units="px",bg="transparent")
tryCatch({print(chart)},error=function(e){})
dev.off()
Cairo(family="Averta Regular",file=paste0(chart.name,".svg"),width=chart.width,height=700,units="px",bg="transparent",dpi=70,type="svg")
tryCatch({print(chart)},error=function(e){})
dev.off()
}
}
}
c35
