####Setup#####
list.of.packages <- c("grid","ggplot2","reshape2","data.table","scales","varhandle","Cairo","plyr","eulerr","extrafont","ggrepel", "stringi")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
if(Sys.info()[["user"]]=="deanb"){
prefix <- "C:"
}else{
prefix <- "~"
}
wd = paste0(prefix,"/git/gnr-country-profile-2019")
setwd(wd)
CairoFonts(
regular="Averta Regular",
bold="Averta Bold"
)
set.seed(12345)
dat_country <- read.csv("data.csv",na.strings=c("","."," "),as.is=TRUE,fileEncoding="utf-8")
dat_reg <- read.csv("data_reg.csv",na.strings=c("","."," "),as.is=TRUE,fileEncoding="utf-8")
dat_world <- read.csv("data_world.csv",na.strings=c("","."," "),as.is=TRUE,fileEncoding="utf-8")
names(dat_reg)[1] = "country"
names(dat_world)[15]="country"
dat_world$country = "Global"
data <- rbind.fill(dat_country,dat_reg,dat_world)
countries <- unique(dat_country$country)
regions <- unique(dat_reg$country)
world <- unique(dat_world$country)
blank <- data.frame(x=0,y=0,text="No data")
no.data <- ggplot(blank,aes(x,y,label=text)) +
geom_text(size=20,color="#475C6D",family="Averta Regular") +
theme(
axis.line = element_blank()
,axis.text = element_blank()
,axis.ticks = element_blank()
,axis.title = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.background = element_rect(fill="#CFD9E5")
)
simple_style = theme_bw() +
theme(
panel.border = element_blank()
,panel.grid.major = element_blank()
,panel.background = element_blank()
,plot.background = element_blank()
,panel.grid.minor = element_blank()
,axis.line = element_line(colour = "black")
,text = element_text(family="Averta Regular")
)
yellow <- "#FCC97A" #light orange
orange <- "#F39000" #orange
red <- "#DE5D09" #dark orange
blue <- "#475C6D" #dark grey
light.blue <- "#93CAC9" #aqua
lighter.blue <- "#B2D8D7" #aqua light
dark.grey <- "#A0ADBB" #grey
grey <- "#CFD9E5" #light grey
white <- "#ffffff"
quintileFillValues <- c(red, orange, yellow, lighter.blue, light.blue)
quintileGreyFillValues <- c(red, orange, yellow, lighter.blue, grey)
sixFillvalues=c(red, orange, yellow, lighter.blue, light.blue,grey)
fourFillValues <- c(red,yellow,light.blue,grey)
lightBlueYellowRed = c(light.blue,yellow,red)
YellowRedGrey = c(yellow,red,grey)
yellowOrangeFill <- scale_fill_manual(values=c(yellow,orange))
orangeYellowFill <- scale_fill_manual(values=c(orange,yellow))
redYellowFill <- scale_fill_manual(values=c(red,yellow))
yellowRedFill <- scale_fill_manual(values=c(yellow,red))
yellowOrangeRedFill <- scale_fill_manual(values=c(yellow,orange,red))
lightBlueYellowRedFill <- scale_fill_manual(values=c(light.blue,yellow,red))
YellowRedGreyFill <- scale_fill_manual(values=c(yellow,red,grey))
orangeLightBlueFill <- scale_fill_manual(values=c(orange,light.blue))
orangeFill <- scale_fill_manual(values=c(orange))
yellowFill <- scale_fill_manual(values=c(yellow))
blueFill <- scale_fill_manual(values=c(blue))
lightBlueLighterBlueFill  <- scale_fill_manual(values=c(light.blue, lighter.blue))
lightBlueFill <- scale_fill_manual(values=c(light.blue))
lighterBlueFill <- scale_fill_manual(values=c(lighter.blue))
quintileFill <-  scale_fill_manual(values=quintileFillValues)
quintileGreyFill <-  scale_fill_manual(values=quintileGreyFillValues)
sixFill <- scale_fill_manual(values=c(red, orange, yellow, lighter.blue, light.blue,grey))
fourFill <- scale_fill_manual(values=fourFillValues)
yellowOrangeColor <- scale_color_manual(values=c(yellow,orange))
orangeYellowColor <- scale_color_manual(values=c(orange,yellow))
redYellowColor <- scale_color_manual(values=c(red,yellow))
yellowRedColor <- scale_color_manual(values=c(yellow,red))
yellowOrangeRedColor <- scale_color_manual(values=c(yellow,orange,red))
lightBlueYellowRedColor <- scale_color_manual(values=c(light.blue,yellow,red))
lightBlueYellowRedColor <- scale_color_manual(values=c(light.blue,yellow,red))
YellowRedGreyColor <- scale_color_manual(values=c(yellow,red,grey))
orangeLightBlueColor <- scale_color_manual(values=c(orange,light.blue))
orangeColor <- scale_color_manual(values=c(orange))
blueColor <- scale_color_manual(values=c(blue))
quintileColor <-  scale_color_manual(values=quintileFillValues)
quintileGreyColor <-  scale_color_manual(values=quintileGreyFillValues)
sixColor <- scale_color_manual(values=c(red, orange, yellow, lighter.blue, light.blue,grey))
fourColor <- scale_color_manual(values=fourFillValues)
trmelColor = scale_color_manual(values=c(red,yellow,light.blue))
textQuintileOffset <- scale_color_manual(values=c(white,white,blue,blue,blue))
firstAndLast <- function(vec,year_vec){
label_df = data.frame(vec=as.numeric(vec),year_vec=as.numeric(year_vec))
min.year = min(label_df$year_vec, na.rm=T)
max.year = max(label_df$year_vec, na.rm=T)
label_df$include = NA
label_df$include[which(label_df$year_vec==min.year)][which.min(label_df$vec[which(label_df$year_vec==min.year)])] = 1
label_df$include[which(label_df$year_vec==min.year)][which.max(label_df$vec[which(label_df$year_vec==min.year)])] = 1
label_df$include[which(label_df$year_vec==max.year)][which.min(label_df$vec[which(label_df$year_vec==max.year)])] = 1
label_df$include[which(label_df$year_vec==max.year)][which.max(label_df$vec[which(label_df$year_vec==max.year)])] = 1
if(is.factor(label_df$vec)){label_df$vec = unfactor(label_df$vec)}
label_df$vec[which(is.na(label_df$include))] = ""
return(label_df$vec)
}
round.simple = function(x, digits=0) {
posneg = sign(x)
z = abs(x)*10^digits
z = z + 0.5
z = trunc(z)
z = z/10^digits
z*posneg
}
round.simple = Vectorize(round.simple)
safeFormat <- function(vec, precision=0, prefix="", suffix=""){
results <- c()
for(x in vec){
#Missing
if(is.na(x)){
result <- ""
}else{
result <- format(round.simple(x, digits = precision),format="d",big.mark=",",nsmall=precision)
}
if(result!=""){
result = paste0(prefix,result,suffix)
}
results <- c(results,result)
}
return(results)
}
slugify = function(value){
value = as.character(value)
value = stri_trans_nfkd(value)
value = stri_enc_toascii(value)
value = gsub("\032","",value)
value = gsub("(?!-)[[:punct:]]", "", value, perl=T)
value = gsub("[[:space:]]", "-", value)
value = tolower(value)
value = trimws(value)
value = gsub("[-]+", "-", value)
return(value)
}
chart.list = c(
"c1a",
"c1b",
"c2",
"c3a",
"c3b",
"c3c",
paste0("c",4:23),
"c24a",
"c24b",
paste0("c",25:33),
"c34a",
"c34b",
paste0("c",35:56)
)
res_def = c(
"full" = 2400,
"half" = 1200,
"half-plus" = 1350,
"half-minus" = 1050,
"third" = 800,
"sixth" = 400,
"eighth" = 300
)
resolutions = res_def[c(
"sixth",
"sixth",
"third",
"third",
"eighth",
"eighth",
rep("third", 19),
"half",
"half-plus",
"half-minus",
rep("third", 9),
"half",
"half",
"half",
rep("third", 20),
"half"
)]
wd = paste0(prefix,"/git/gnr-country-profile-2019/static")
setwd(wd)
res.names = names(res_def)
for(res.name in res.names){
chart.name = paste0("no-data-",res.name)
chart = no.data
chart.width = res_def[[res.name]]
Cairo(family="Averta Regular",file=paste0(chart.name,".png"),width=chart.width,height=700,units="px",bg="transparent")
tryCatch({print(chart)},error=function(e){})
dev.off()
Cairo(family="Averta Regular",file=paste0(chart.name,".svg"),width=chart.width,height=700,units="px",bg="transparent",dpi=70,type="svg")
tryCatch({print(chart)},error=function(e){})
dev.off()
}
wd = paste0(prefix,"/git/gnr-country-profile-2019/charts")
setwd(wd)
this.country="Austria"
message(this.country)
# Clear chart namespace on new loop
for(chart.name in chart.list){
if(exists(chart.name)){
rm(list=chart.name)
}
}
dir.create(paste(wd,slugify(this.country),sep="/"))
setwd(paste(wd,slugify(this.country),sep="/"))
countrydat <- subset(data,country==this.country)
if(this.country %in% unique(dat_country$country)){
line_name="National"
}
if(this.country %in% unique(dat_reg$country)){
line_name="Regional"
}
if(this.country %in% unique(dat_world$country)){
line_name="Global"
}
if(is.factor(countrydat$year)){
countrydat$year = unfactor(countrydat$year)
}
countrydat$year = as.numeric(countrydat$year)
if(nchar(this.country)>20){
this.country.label = line_name
}else{
this.country.label = copy(this.country)
}
recipient = subset(countrydat,indicator %in% c("ODA_received","ODA_received_percent","ODA_basic_disbursed","ODA_basic_disbursed_percent"))[1,"recip"]
#Chart 1 part a and b
indicators = c("190_percent","320_percent","GDP_capita_PPP")
c1data = subset(countrydat,indicator %in% indicators)
c1data$value = as.numeric(c1data$value)
c1data <- subset(c1data,!is.na(value))
if(nrow(c1data)!=0){
c1a.melt <- subset(c1data, indicator %in% c("190_percent","320_percent"))
if(nrow(c1a.melt)>0){
c1a.melt$variable = NA
c1a.melt$variable[which(c1a.melt$indicator=="190_percent")] = "$1.90/day"
c1a.melt$variable[which(c1a.melt$indicator=="320_percent")] = "$3.20/day"
c1a.melt <- subset(c1a.melt,!is.na(value))
c1a.melt <- c1a.melt[order(c1a.melt$year),]
c1a.melt$year = as.factor(c1a.melt$year)
c1a.max <- max(c1a.melt$value,na.rm=TRUE)
c1a.key.data = data.frame(year=as.numeric(c(NA,NA)),variable=c("$1.90/day","$3.20/day"),value=as.numeric(c(NA,NA)))
c1a = ggplot(c1a.melt,aes(year,value,fill=variable)) +
geom_bar(position="dodge",stat="identity",show.legend=F,size=1) +
geom_point(data=c1a.key.data,aes(fill=variable),size=12,color="transparent",stroke=0,shape=22) +
orangeYellowFill +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE)) +
simple_style  +
scale_y_continuous(expand = c(0,0),limits=c(0,max(c1a.max*1.1,1))) +
# expand_limits(y=c1a.max*1.1) +
theme(
legend.position="top"
,legend.text = element_text(size=35,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_blank()
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_blank()
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_blank()
)
if (c1a.max>10){
c1a = c1a + geom_text(size=9,aes(label=safeFormat(value)),position=position_dodge(1),vjust=-0.3,color=blue,family="Averta Regular")
}else{c1a = c1a + geom_text(size=9,aes(label=safeFormat(value,precision=1)),position=position_dodge(1),vjust=-0.3,color=blue,family="Averta Regular")}
}
if(nrow(c1a.melt)==0){
c1a = NULL
c1a.missing<-TRUE
}else{
c1a.missing<-FALSE
}
c1b.melt <- subset(c1data,indicator == "GDP_capita_PPP")
if(nrow(c1b.melt)>0){
c1b.melt$variable = "GDP per capita"
c1b.melt <- subset(c1b.melt,!is.na(value))
c1b.melt <- c1b.melt[order(c1b.melt$year),]
top4 = c1b.melt$year[c(max(nrow(c1b.melt)-3,1):nrow(c1b.melt))]
c1b.melt = subset(c1b.melt,year %in% top4)
c1b.melt$year = as.factor(c1b.melt$year)
c1b.max <- max(c1b.melt$value,na.rm=TRUE)
c1b.key.data = data.frame(year=as.numeric(c(NA)),variable=c("GDP per capita"),value=as.numeric(c(NA)))
c1b = ggplot(c1b.melt,aes(year,value,fill=variable)) +
geom_bar(position="dodge",stat="identity",show.legend=F,size=1) +
geom_point(data=c1b.key.data,aes(fill=variable),size=12,color="transparent",stroke=0,shape=22) +
lightBlueFill +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE)) +
simple_style  +
scale_y_continuous(expand = c(0,0)) +
expand_limits(y=c1b.max*1.1) +
theme(
legend.position="top"
,legend.text = element_text(size=35,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_blank()
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_blank()
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_blank()
,legend.key.size = unit(2.2,"lines")
) + geom_text(size=9,aes(label=safeFormat(value,precision=1)),position=position_dodge(1),vjust=-0.3,color=blue,family="Averta Regular")
}
if(nrow(c1b.melt)==0){
c1b = NULL
c1b.missing<-TRUE
}else{
c1b.missing<-FALSE
}
}else{
c1a = NULL
c1a.missing <- TRUE
c1b = NULL
c1b.missing <- TRUE
}
c1a
